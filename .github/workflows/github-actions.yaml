name: Build and Push Docker Image to ECR & Apply changes to EKS (CI/CD Pipeline)

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
        aws configure set region us-east-1
        aws configure set output json

    - name: Login to ECR 
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 073520217001.dkr.ecr.us-east-1.amazonaws.com

    - name: Build and tag Docker image
      run: |
        docker build -t cloudsync/webapp -f CloudWebApplication/Dockerfile .
        docker tag cloudsync/webapp:latest 073520217001.dkr.ecr.us-east-1.amazonaws.com/cloudsync/webapp:latest

    - name: DevSecOps - Scan Docker image for vulnerabilities using Trivy
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest -q --severity HIGH,CRITICAL cloudsync/webapp

    - name: Push to ECR
      run: docker push 073520217001.dkr.ecr.us-east-1.amazonaws.com/cloudsync/webapp:latest

    - name: Set up kubectl
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        aws-output: json

    - name: Configure kubectl to use EKS
      run: |
        aws eks update-kubeconfig --name CloudSync-Cluster --region us-east-1

    - name: DevSecOps - Scan Kubernetes manifests (e.g., deployment.yaml) for security issues
      run: |
        kubectl apply -f k8/deployment.yaml --dry-run=client | kube-score score

    - name: Delete and Redeploy to EKS (deployment.yaml)
      run: |
        kubectl delete -f k8/deployment.yaml || true
        kubectl apply -f k8/deployment.yaml
        kubectl apply -f k8/service.yaml

    - name: Check Cluster Nodes, Deployment, Services
      run: |
        kubectl get nodes
        kubectl get deployment
        kubectl get services
